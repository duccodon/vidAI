<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video Editor</title>
  <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>
  <script src="https://unpkg.com/wavesurfer.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <style>
    .timeline-scale {
      display: flex;
      font-size: 0.75rem;
      color: #4B5563;
      white-space: nowrap;
      gap: 32px;
      position: relative;
      min-width: 800px;
    }
    .playhead {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 2px;
      background-color: red;
      z-index: 10;
    }
    .scroll-sync {
      overflow-x: auto;
      white-space: nowrap;
    }
    #waveform {
      min-width: 800px;
      cursor: pointer;
    }
    #imageTimeline {
    position: relative; /* B·∫Øt bu·ªôc ƒë·ªÉ ·∫£nh con ƒë·ªãnh v·ªã ƒë√∫ng */
    
  }
  #imageTimeline * {
    user-select: none; /* NgƒÉn ch·ªçn text ho·∫∑c ·∫£nh khi k√©o */
  }
  </style>
</head>
<body class="bg-gray-50 text-gray-800">

<div class="scrollbar fixed top-[3.8rem] sm:top-[5.4rem] left-[100px] h-[calc(100vh-5*1vh-3.8rem)] sm:h-[calc(100vh-5*1vh-7rem)] md:h-[calc(100vh-5*1vh-2rem)] w-[100%] md:w-[93%] bg-white rounded-[1rem] border border-[#ccc] overflow-y-auto overflow-x-hidden z-3 p-4 space-y-4">

  <div class="max-w-6xl mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6 text-blue-700">üé¨ AI Video Editor</h1>

    <!-- Controls -->
    <div class="mb-8 flex flex-wrap gap-4 items-center">
      <button id="publishBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-xl shadow">Publish</button>
      <button id="renderBtn" class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-xl shadow">Preview</button>
      <span id="currentTimeDisplay" class="text-sm text-gray-700 ml-4">üïí 00:00</span>
    </div>

    <!-- Image Selection & Preview Side by Side -->
    <div class="mb-10">
      <div class="flex gap-1">
        <div class="grid grid-cols-4 gap-3 max-h-96 overflow-y-auto w-1/2 bg-white rounded-xl shadow-inner p-4" id="imageForm"></div>
        <div class="w-2/3 bg-white rounded-xl p-4">
          <h3 class="text-lg font-medium mb-2 text-gray-600">Image Preview</h3>
          <div class="border border-gray-300 rounded-xl p-4 shadow">
            <img id="selectedPreview" src="" class="w-full h-auto rounded-xl" />
            <button id="moveToTimeline" class="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-xl w-full shadow">Move to Timeline</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Step Slider -->
    <div class="mb-6 flex flex-col">
      <label for="stepSelect" class="text-sm font-medium text-gray-700 mb-1">
        Timeline Step (seconds): 
        <span id="stepValue" class="font-semibold text-blue-600 ml-1">5</span>
      </label>
      <input id="stepSelect" type="range" min="1" max="30" step="1" value="5" class="w-full">
    </div>
    <div class="mb-6">
      <div class="mb-6 flex justify-between items-center gap-4">
        <!-- Nh√≥m b√™n tr√°i -->
        <div class="flex gap-4">
          <button id="playPauseBtn" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-xl shadow">Play / Pause</button>
          <button id="RestartBtn" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-xl shadow">Restart</button>
        </div>
      
        <!-- Nh√≥m b√™n ph·∫£i -->
        <div class="flex gap-2">
          <button id="moveFirstBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-xl shadow">First</button>
          <button id="movePrevBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-xl shadow">Prev</button>
          <button id="moveNextBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-xl shadow">Next</button>
          <button id="moveLastBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-xl shadow">Last</button>
        </div>
      </div>
      
    </div>
    <!-- Image Timeline (shared scroll) -->
    <div class="mb-10 scroll-sync" id="timelineScroll">
      <div style="width: max-content">
        <div class="timeline-scale mb-1 relative" id="imageScale">
          <div id="imagePlayhead" class="playhead"></div>
        </div>
        <div id="imageTimeline" class="flex h-24 p-4 border border-gray-300 bg-white rounded-xl shadow-inner" style="min-width: 100%"></div>
      </div>
    </div>

    <!-- Audio Timeline (shared scroll) -->
    <div class="mb-10 scroll-sync" id="audioTimelineScroll">
      <div style="width: max-content">
        <div class="timeline-scale mb-1 relative" id="audioScale">
          <div id="audioPlayhead" class="playhead"></div>
        </div>
        <div class="waveform-container">
          <div id="waveform" class="h-24 bg-white border rounded-xl shadow-inner"></div>
        </div>
      </div>
    </div>

    <div class="mb-10">
      <h2 class="text-xl font-semibold mb-4 text-gray-700">üé• Video Preview</h2>
        <video id="videoPreview" controls style="display: none; max-width: 100%"></video>
    </div>
    
    </div>

    <div id="publishModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <h2 class="text-lg font-semibold mb-2">Ch·ªçn ƒë·ªô ph√¢n gi·∫£i khi xu·∫•t b·∫£n</h2>
        <p class="text-sm text-gray-600 mb-4">
          Sau khi xu·∫•t b·∫£n, video s·∫Ω ƒë∆∞·ª£c render v√† l∆∞u l·∫°i. B·∫°n kh√¥ng th·ªÉ ch·ªânh s·ª≠a b·ªë c·ª•c n·ªØa.
        </p>
        <select id="resolutionSelect" class="w-full p-2 border rounded mb-4">
          <option value="360p">360p (nhanh nh·∫•t)</option>
          <option value="720p" selected>720p (khuy√™n d√πng)</option>
          <option value="1080p">1080p (ch·∫•t l∆∞·ª£ng cao)</option>
        </select>
        <div class="flex justify-end gap-2">
          <button id="cancelPublish" class="px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded">Cancel</button>
          <button id="confirmPublish" class="px-4 py-2 bg-blue-600 text-white hover:bg-blue-700 rounded">Confirm</button>
        </div>
      </div>
    </div>
    <script>

        const imageForm = document.getElementById('imageForm');
        const imageTimeline = document.getElementById('imageTimeline');
        const playPauseBtn = document.getElementById('playPauseBtn');


        const metadata = {{{json metadata}}};
        const imageFilenames = [
        "image1.jpg", "image2.jpg", "image3.jpg", "image4.jpg", "image5.jpg",
        "image1.jpg", "image2.jpg", "image3.jpg", "image4.jpg", "image5.jpg"
        ];

        imageFilenames.forEach((filename) => {
          const img = document.createElement('img');
          img.src = `/img/assets/${filename}`;
          img.className = 'h-24 w-full object-cover border rounded-lg shadow cursor-pointer';
          img.onclick = () => {
              selectedPreview.src = `/img/assets/${filename}`;
          };
          imageForm.appendChild(img);
        });
        const imageScale = document.getElementById('imageScale');
        const audioScale = document.getElementById('audioScale');
        const waveform = document.getElementById('waveform');
        const stepSelect = document.getElementById('stepSelect');
        const stepValue = document.getElementById('stepValue');
        const audioPlayhead = document.getElementById('audioPlayhead');
        const imagePlayhead = document.getElementById('imagePlayhead');
        const currentTimeDisplay = document.getElementById('currentTimeDisplay');
        const restartButton = document.getElementById('RestartBtn');
        
        const publishBtn = document.getElementById('publishBtn');
        const publishModal = document.getElementById('publishModal');
        const resolutionSelect = document.getElementById('resolutionSelect');
        const cancelPublish = document.getElementById('cancelPublish');
        const confirmPublish = document.getElementById('confirmPublish');

        function updateTimelineMarks(duration) {
        const step = parseInt(stepSelect.value);
        const pps = waveform.scrollWidth / duration; // px per second
        const markWidth = step * pps;

        [imageScale, audioScale].forEach(scale => {
            scale.innerHTML = '';
            const playhead = scale === imageScale ? imagePlayhead : audioPlayhead;
            scale.appendChild(playhead);

            for (let t = 0; t <= duration; t += step) {
            const mins = Math.floor(t / 60);
            const secs = Math.floor(t % 60).toString().padStart(2, '0');

            const tick = document.createElement('div');
            tick.style.display = 'inline-block';
            tick.style.width = `${markWidth}px`;
            tick.textContent = `${mins}:${secs}`;
            scale.appendChild(tick);
            }

            scale.style.width = `${waveform.scrollWidth}px`; // gi·ªØ ƒë·ªìng b·ªô scroll
            imageTimeline.style.width = `${waveform.scrollWidth}px`;
        });
        }


        const wavesurfer = WaveSurfer.create({
        container: '#waveform',
        waveColor: '#d1d5db',
        progressColor: '#3b82f6',
        height: 80
        });

        playPauseBtn.onclick = () => {
        wavesurfer.playPause();
        };

        restartButton.onclick = () => {
        wavesurfer.seekTo(0);     // quay v·ªÅ ƒë·∫ßu
        wavesurfer.play();        // ph√°t l·∫°i
        };


        waveform.addEventListener('click', (e) => {
        const rect = waveform.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const percent = x / rect.width;
        wavesurfer.seekTo(percent);
        });

        wavesurfer.on('ready', () => {
        const duration = wavesurfer.getDuration();
        updateTimelineMarks(duration);
        });

        wavesurfer.on('audioprocess', () => {
        const currentTime = wavesurfer.getCurrentTime();
        const duration = wavesurfer.getDuration();
        const percent = currentTime / duration;

        const audioScaleWidth = audioScale.scrollWidth;
        const imageScaleWidth = imageScale.scrollWidth;

        audioPlayhead.style.left = `${percent * audioScaleWidth}px`;
        imagePlayhead.style.left = `${percent * imageScaleWidth}px`;

        const mins = Math.floor(currentTime / 60);
        const secs = Math.floor(currentTime % 60).toString().padStart(2, '0');
        currentTimeDisplay.textContent = `üïí ${mins}:${secs}`;
        });

        wavesurfer.on('seek', (progress) => {
        const duration = wavesurfer.getDuration();
        const currentTime = progress * duration;
        const mins = Math.floor(currentTime / 60);
        const secs = Math.floor(currentTime % 60).toString().padStart(2, '0');
        currentTimeDisplay.textContent = `üïí ${mins}:${secs}`;
        });

        stepSelect.addEventListener('input', () => {
        const duration = wavesurfer.getDuration();
        stepValue.textContent = stepSelect.value; // ‚Üê C·∫≠p nh·∫≠t gi√° tr·ªã
        updateTimelineMarks(duration);
        });

        document.getElementById('timelineScroll').addEventListener('scroll', (e) => {
        document.getElementById('audioTimelineScroll').scrollLeft = e.target.scrollLeft;
        });
        document.getElementById('audioTimelineScroll').addEventListener('scroll', (e) => {
        document.getElementById('timelineScroll').scrollLeft = e.target.scrollLeft;
        });

        wavesurfer.load('/img/assets/audio1.mp3');


        const renderBtn = document.getElementById('renderBtn');
        const videoPreview = document.getElementById('videoPreview');

        renderBtn.addEventListener('click', async () => {
          renderBtn.disabled = true;
          renderBtn.textContent = 'Rendering‚Ä¶';
          try {
            const resp = await fetch('/Video/api/render', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                timeline: imageManager.getAllImages(),
                audioUrl: '/img/assets/audio1.mp3',
                audioDuration: wavesurfer.getDuration(),
              })
            });
            if (!resp.ok) throw new Error(`Server error ${resp.status}`);
            const blob = await resp.blob();
            const url = URL.createObjectURL(blob);
            videoPreview.src = url;
            videoPreview.style.display = 'block';
            await videoPreview.play();
          } catch (err) {
            console.error(err);
            alert('Kh√¥ng render ƒë∆∞·ª£c video: ' + err.message);
          } finally {
            renderBtn.disabled = false;
            renderBtn.textContent = 'Render MP4';
          }
        });


        publishBtn.addEventListener('click', () => {
          publishModal.classList.remove('hidden');
        });

        cancelPublish.addEventListener('click', () => {
          publishModal.classList.add('hidden');
        });

        confirmPublish.addEventListener('click', async () => {
          publishModal.classList.add('hidden');
          publishBtn.disabled = true;
          publishBtn.textContent = 'Exporting...';

          try {
            const resp = await fetch('/Video/api/export', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                timeline: imageManager.getAllImages(), // b·∫°n c·∫ßn ƒë·∫£m b·∫£o g·ªìm start, duration, src
                audioUrl: '/img/assets/audio1.mp3',
                audioDuration: wavesurfer.getDuration(),
                resolution: resolutionSelect.value,
                title: metadata.title,
                description: metadata.description,
                topic: metadata.topic,
              })
            });

            const result = await resp.json();
            if (!result.success) throw new Error('Export failed');

            alert('‚úÖ Video ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n th√†nh c√¥ng!\nƒê∆∞·ªùng d·∫´n: ' + result.url);
            window.location.href = result.redirect; // ho·∫∑c m·ªü link trong tab m·ªõi
            // ho·∫∑c: hi·ªÉn th·ªã link t·∫£i, l∆∞u v√†o DB, v.v.



          } catch (err) {
            console.error(err);
            alert('‚ùå Kh√¥ng th·ªÉ xu·∫•t b·∫£n: ' + err.message);
          } finally {
            publishBtn.disabled = false;
            publishBtn.textContent = 'Publish';
          }
        });
    </script>

    <script type="module">
        //SCRIPT JS CHO BEHAVIOUR TIMELINE ·∫¢NH
        const metadata = {{{json metadata}}}; // D·ªØ li·ªáu metadata t·ª´ server

        import { ImageTimelineManager } from '/js/imageTimelineManager.js';

        const timelineElement = document.getElementById('imageTimeline');
        const selectedPreview = document.getElementById('selectedPreview');
        const moveBtn = document.getElementById('moveToTimeline');
        const imageForm = document.getElementById('imageForm');

        const imageManager = new ImageTimelineManager(
        document.getElementById('imageTimeline'),
        () => waveform.scrollWidth,
        () => wavesurfer.getDuration()
        );
        window.imageManager = imageManager;  // export ra global
        const imageFilenames = [
        "image1.jpg", "image2.jpg", "image3.jpg", "image4.jpg", "image5.jpg",
        "image1.jpg", "image2.jpg", "image3.jpg", "image4.jpg", "image5.jpg"
        ];

        imageFilenames.forEach((filename) => {
        const img = document.createElement('img');
        img.src = `/img/assets/${filename}`;
        img.className = 'h-24 w-full object-cover border rounded-lg shadow cursor-pointer';
        img.onclick = () => { //set selected image to preview
            selectedPreview.src = `/img/assets/${filename}`;
            console.log("Preview selected:", selectedPreview.src);
        };
        imageForm.appendChild(img);
        });

        moveBtn.onclick = () => { // di chuy·ªÉn ·∫£nh t·ª´ preview v√†o timeline
        if (selectedPreview.src) {
            const src = selectedPreview.src;
            const start = imageManager.getNextAvailableStart();
            imageManager.addImage(src, start, 5); // th·ªùi gian m·∫∑c ƒë·ªãnh l√† 5 gi√¢y
        }
        };

        // G·ªçi t·ª´ console ƒë·ªÉ debug
        window.getImageData = () => {
            const data = imageManager.getAllImages();
            console.log("Current timeline image data:", data);
            return data;
        };
        window.addEventListener('keydown', (e) => {
        if ((e.key === 'Delete' || e.key === 'Backspace') && imageManager.selectedWrapper) {
            const wrapper = imageManager.selectedWrapper;

            // X√≥a kh·ªèi DOM
            wrapper.remove();

            // X√≥a kh·ªèi danh s√°ch qu·∫£n l√Ω
            imageManager.images = imageManager.images.filter(img => img.wrapper !== wrapper);
            imageManager.selectedWrapper = null;
        }
        });
        window.addEventListener('keydown', (e) => {
        if ((e.key === 'Delete' || e.key === 'Backspace') && imageManager.selectedWrapper) {
            const wrapper = imageManager.selectedWrapper;

            // X√≥a kh·ªèi DOM
            wrapper.remove();

            // X√≥a kh·ªèi danh s√°ch qu·∫£n l√Ω
            imageManager.images = imageManager.images.filter(img => img.wrapper !== wrapper);
            imageManager.selectedWrapper = null;
        }
        });
        function repositionImage(index) {
            const wrapper = imageManager.selectedWrapper;
            if (!wrapper) return;
            const image = imageManager.images.find(img => img.wrapper === wrapper);
            if (!image) return;

            imageManager.images = imageManager.images.filter(img => img !== image);
            imageManager.images.splice(index, 0, image);

            // T√≠nh l·∫°i v·ªã tr√≠ b·∫Øt ƒë·∫ßu d·ª±a v√†o th·ª© t·ª±
            const pps = imageManager.getPixelsPerSecond();
            let currentStart = 0;
            imageManager.images.forEach(img => {
            img.start = currentStart;
            img.wrapper.style.left = `${currentStart * pps}px`;
            currentStart += img.duration;
            });
        }

        document.getElementById('moveFirstBtn').onclick = () => repositionImage(0);
        document.getElementById('moveLastBtn').onclick = () => repositionImage(imageManager.images.length);
        document.getElementById('movePrevBtn').onclick = () => {
            const i = imageManager.images.findIndex(img => img.wrapper === imageManager.selectedWrapper);
            if (i > 0) repositionImage(i - 1);
        };
        document.getElementById('moveNextBtn').onclick = () => {
            const i = imageManager.images.findIndex(img => img.wrapper === imageManager.selectedWrapper);
            if (i >= 0 && i < imageManager.images.length - 1) repositionImage(i + 1);
        };
    </script>
</body>
</html>