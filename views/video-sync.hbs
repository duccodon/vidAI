<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video Editor</title>
  <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>
  <script src="https://unpkg.com/wavesurfer.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <style>
    .timeline-scale {
      display: flex;
      font-size: 0.75rem;
      color: #4B5563;
      white-space: nowrap;
      gap: 32px;
      position: relative;
      min-width: 800px;
    }
    .playhead {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 2px;
      background-color: red;
      z-index: 10;
    }
    .scroll-sync {
      overflow-x: auto;
      white-space: nowrap;
    }
    #waveform {
      min-width: 800px;
      cursor: pointer;
    }
    #imageTimeline {
    position: relative; /* B·∫Øt bu·ªôc ƒë·ªÉ ·∫£nh con ƒë·ªãnh v·ªã ƒë√∫ng */
    margin-bottom: 2px;
    min-height: 100px; /* ƒê·∫£m b·∫£o chi·ªÅu cao ƒë·ªß cho vi·ªÅn cam c·ªßa video */
    box-sizing: border-box;
    }
  #imageTimeline * {
    user-select: none; /* NgƒÉn ch·ªçn text ho·∫∑c ·∫£nh khi k√©o */
  }
  </style>
</head>
<body class="bg-gray-50 text-gray-800">

<div class="scrollbar fixed top-[3.8rem] sm:top-[5.4rem] left-[100px] h-[calc(100vh-5*1vh-3.8rem)] sm:h-[calc(100vh-5*1vh-7rem)] md:h-[calc(100vh-5*1vh-2rem)] w-[100%] md:w-[93%] bg-white rounded-[1rem] border border-[#ccc] overflow-y-auto overflow-x-hidden z-3 p-4 space-y-4">
  <div class="max-w-6xl mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6 text-blue-700">üé¨ AI Video Editor</h1>

    <!-- Controls -->
    <div class="mb-8 flex flex-wrap gap-4 items-center">
      <button id="publishBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-xl shadow">Publish</button>
      <button id="renderBtn" class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-xl shadow">Preview</button>
      <span id="currentTimeDisplay" class="text-sm text-gray-700 ml-4">üïí 00:00</span>
    </div>

    <!-- Image Selection & Preview Side by Side -->
    <div class="mb-10">
      <div class="flex gap-1">
        <div class="grid grid-cols-4 gap-3 max-h-96 overflow-y-auto w-1/2 bg-white rounded-xl shadow-inner p-4" id="imageForm"></div>
        <div class="w-2/3 bg-white rounded-xl p-4">
          <h3 class="text-lg font-medium mb-2 text-gray-600">Image Preview</h3>
          <div class="border border-gray-300 rounded-xl p-4 shadow">
            <img id="selectedPreview" src="" class="w-full h-auto rounded-xl" />
            <button id="moveToTimeline" class="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-xl w-full shadow">Move to Timeline</button>
          </div>
        </div>
      </div>
    </div>
    <!-- Audio Slider -->
    <div class="mb-6">
      <label for="volumeRange" class="text-sm font-medium text-gray-700 mb-1">
        Volume: <span id="volumeValue" class="font-semibold text-blue-600 ml-1">100%</span>
      </label>
      <input type="range" id="volumeRange" min="0" max="200" value="100" step="1" class="w-full">
    </div>


    <div class="mb-6">
      <div class="mb-6 flex justify-between items-center gap-4">
        <!-- Nh√≥m b√™n tr√°i -->
        <div class="flex gap-4">
          <button id="playPauseBtn" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-xl shadow">Play / Pause</button>
          <button id="RestartBtn" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-xl shadow">Restart</button>
        </div>
      
        <!-- Nh√≥m b√™n ph·∫£i -->
        <div class="flex gap-2">
          <button id="moveFirstBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-xl shadow">First</button>
          <button id="movePrevBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-xl shadow">Prev</button>
          <button id="moveNextBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-xl shadow">Next</button>
          <button id="moveLastBtn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-xl shadow">Last</button>
        </div>
      </div>
      
    </div>
    <!-- Image Timeline (shared scroll) -->
    <div class="mb-10 scroll-sync" id="timelineScroll">
      <div style="width: max-content">
        <div class="timeline-scale mb-1 relative" id="imageScale">
          <div id="imagePlayhead" class="playhead"></div>
        </div>
        <div id="imageTimeline" class="relative flex h-24 p-4 border border-gray-300 bg-white rounded-xl shadow-inner">
        <div id="imageTimelineTickLayer" class="absolute top-0 bottom-0 left-0 right-0 z-0"></div>
        </div>

      </div>
    </div>

    <!-- Audio Timeline (shared scroll) -->
    <div class="mb-10 scroll-sync" id="audioTimelineScroll">
      <div style="width: max-content">
        <div id="audioTimeLabel" class="absolute text-xs text-gray-700 bg-white px-1 rounded shadow" style="transform: translateX(-50%); top: -1.25rem;"></div>
        <div class="timeline-scale mb-1 relative" id="audioScale">
          <div id="audioPlayhead" class="playhead"></div>
        </div>
        <div class="waveform-container">
          <div id="waveform" class="h-24 bg-white border rounded-xl shadow-inner"></div>
        </div>
      </div>
    </div>

    <div class="mb-10">
      <h2 class="text-xl font-semibold mb-4 text-gray-700">üé• Video Preview</h2>
        <video id="videoPreview" controls style="display: none; max-width: 100%"></video>
    </div>
    
    </div>

  <div id="publishModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full space-y-4">
      <h2 class="text-lg font-semibold">Xu·∫•t b·∫£n video</h2>

      <!-- Topic (hi·ªÉn th·ªã c·ªë ƒë·ªãnh) -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Ch·ªß ƒë·ªÅ:</label>
        <div class="bg-gray-100 p-2 rounded text-gray-800" id="topicDisplay"></div>
      </div>

      <!-- Title -->
      <div>
        <label for="videoTitle" class="block text-sm font-medium text-gray-700 mb-1">Ti√™u ƒë·ªÅ video</label>
        <input id="videoTitle" type="text" class="w-full p-2 border rounded" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ..." />
      </div>

      <!-- Description -->
      <div>
        <label for="videoDescription" class="block text-sm font-medium text-gray-700 mb-1">M√¥ t·∫£ video</label>
        <textarea id="videoDescription" rows="3" class="w-full p-2 border rounded" placeholder="Nh·∫≠p m√¥ t·∫£..."></textarea>
      </div>

      <!-- Resolution -->
      <div>
        <label for="resolutionSelect" class="block text-sm font-medium text-gray-700 mb-1">ƒê·ªô ph√¢n gi·∫£i</label>
        <select id="resolutionSelect" class="w-full p-2 border rounded">
          <option value="360p">360p (nhanh nh·∫•t)</option>
          <option value="720p" selected>720p (khuy√™n d√πng)</option>
          <option value="1080p">1080p (ch·∫•t l∆∞·ª£ng cao)</option>
        </select>
      </div>

      <!-- Buttons -->
      <div class="flex justify-end gap-2 pt-2">
        <button id="cancelPublish" class="px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded">Cancel</button>
        <button id="confirmPublish" class="px-4 py-2 bg-blue-600 text-white hover:bg-blue-700 rounded">Confirm</button>
      </div>
    </div>
  </div>
</div>

    <script>
        const imageForm = document.getElementById('imageForm');
        const imageTimeline = document.getElementById('imageTimeline');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const imageScale = document.getElementById('imageScale');
        const audioScale = document.getElementById('audioScale');
        const waveform = document.getElementById('waveform');
        const audioPlayhead = document.getElementById('audioPlayhead');
        const imagePlayhead = document.getElementById('imagePlayhead');
        const currentTimeDisplay = document.getElementById('currentTimeDisplay');
        const restartButton = document.getElementById('RestartBtn');
        const volumeRange = document.getElementById('volumeRange');
        const volumeValue = document.getElementById('volumeValue');
        const timeLabel = document.getElementById('audioTimeLabel');
        const publishBtn = document.getElementById('publishBtn');
        const publishModal = document.getElementById('publishModal');
        const resolutionSelect = document.getElementById('resolutionSelect');
        const cancelPublish = document.getElementById('cancelPublish');
        const confirmPublish = document.getElementById('confirmPublish');
        let fullContent = '';
        window.metadata = {{{json metadata}}};
        function updateTimelineMarks(duration) {
          const step = 5;
          const pps = waveform.scrollWidth / duration;
          const markWidth = step * pps;

          [imageScale, audioScale].forEach(scale => {
            scale.innerHTML = '';
            const playhead = scale === imageScale ? imagePlayhead : audioPlayhead;
            scale.appendChild(playhead);

            const waveformWidth = waveform.scrollWidth;
            const pps = waveformWidth / duration;

            imageScale.style.width = `${waveformWidth}px`;
            audioScale.style.width = `${waveformWidth}px`;
            imageTimeline.style.width = `${waveformWidth}px`; // r·∫•t quan tr·ªçng!

            // T·∫°o tick cho m·ªói step (0, 5, 10, ..., g·∫ßn cu·ªëi)
            let t = 0;
            while (t < duration) {
              const mins = Math.floor(t / 60);
              const secs = Math.floor(t % 60).toString().padStart(2, '0');

              const tick = document.createElement('div');
              tick.style.display = 'inline-block';
              tick.style.width = `${markWidth}px`;
              tick.textContent = `${mins}:${secs}`;
              scale.appendChild(tick);

              t += step;
            }

            // Tick cu·ªëi: cƒÉn ch√≠nh x√°c t·ªõi duration
            const lastWidth = (duration - (t - step)) * pps;
            if (lastWidth > 0) {
              const mins = Math.floor(duration / 60);
              const secs = Math.floor(duration % 60).toString().padStart(2, '0');

              const lastTick = document.createElement('div');
              lastTick.style.display = 'inline-block';
              lastTick.style.width = `${lastWidth}px`;
              lastTick.textContent = `${mins}:${secs}`;
              scale.appendChild(lastTick);
            }

            scale.style.width = `${waveform.scrollWidth}px`;
            imageTimeline.style.width = `${waveform.scrollWidth}px`;
          });
        }
        volumeRange.addEventListener('input', () => {
          const volume = parseInt(volumeRange.value) / 100;
          volumeValue.textContent = `${volumeRange.value}%`;
          wavesurfer.setVolume(volume);
        });

        const wavesurfer = WaveSurfer.create({
        container: '#waveform',
        waveColor: '#d1d5db',
        progressColor: '#3b82f6',
        height: 80
        });

        playPauseBtn.onclick = () => {
        wavesurfer.playPause();
        };

        restartButton.onclick = () => {
        wavesurfer.seekTo(0);     // quay v·ªÅ ƒë·∫ßu
        wavesurfer.play();        // ph√°t l·∫°i
        };


        waveform.addEventListener('click', (e) => {
        const rect = waveform.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const percent = x / rect.width;
        wavesurfer.seekTo(percent);
        });

        wavesurfer.on('ready', () => {
        const duration = wavesurfer.getDuration();
        setTimeout(() => {
          updateTimelineMarks(duration);
        }, 200); // 50‚Äì100ms th∆∞·ªùng ƒë·ªß


        if (metadata && Array.isArray(metadata.timeline)) {
          metadata.timeline.forEach(item => {
            const { src, start, duration } = item;
            const isVideo = src.endsWith('.mp4') || src.endsWith('.mov');
            // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß cho src
            const fullSrc = `/src/${src}`; // ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß, thay ƒë·ªïi n·∫øu c·∫ßn
            if (item.content && item.content.trim() !== '') {
              fullContent += item.content.trim() + ' ';
            }
            // G·ªçi imageManager ƒë·ªÉ th√™m ·∫£nh/video v√†o timeline
            imageManager.addImage(fullSrc, start, duration, isVideo);
          });
        }
        });

        wavesurfer.on('audioprocess', () => {
        const currentTime = wavesurfer.getCurrentTime();
        const duration = wavesurfer.getDuration();
        const percent = currentTime / duration;

        const audioScaleWidth = audioScale.scrollWidth;
        const imageScaleWidth = imageScale.scrollWidth;

        audioPlayhead.style.left = `${percent * audioScaleWidth}px`;
        imagePlayhead.style.left = `${percent * imageScaleWidth}px`;

        const mins = Math.floor(currentTime / 60);
        const secs = Math.floor(currentTime % 60).toString().padStart(2, '0');
        currentTimeDisplay.textContent = `üïí ${mins}:${secs}`;

        const playheadX = imagePlayhead.offsetLeft;
        const container = document.getElementById('timelineScroll');

        const buffer = 100; // pixel tr∆∞·ªõc khi ch·∫°m r√¨a
        if (playheadX > container.scrollLeft + container.offsetWidth - buffer) {
          container.scrollLeft = playheadX - container.offsetWidth + buffer;
        }

        if (timeLabel) {
          timeLabel.style.left = `${percent * audioScaleWidth}px`;
          timeLabel.textContent = `${mins}:${secs}`;
        }
        });

        wavesurfer.on('seek', (progress) => {
        const duration = wavesurfer.getDuration();
        const currentTime = progress * duration;
        const mins = Math.floor(currentTime / 60);
        const secs = Math.floor(currentTime % 60).toString().padStart(2, '0');
        currentTimeDisplay.textContent = `üïí ${mins}:${secs}`;
        });

        document.getElementById('timelineScroll').addEventListener('scroll', (e) => {
        document.getElementById('audioTimelineScroll').scrollLeft = e.target.scrollLeft;
        });
        document.getElementById('audioTimelineScroll').addEventListener('scroll', (e) => {
        document.getElementById('timelineScroll').scrollLeft = e.target.scrollLeft;
        });


        //ƒê·∫£m b·∫£o audio ƒë∆∞·ª£c load l√™n wavesurfer v√† audio ƒë∆∞·ª£c g·ª≠i ƒëi l√† gi·ªëng nhau
        wavesurfer.load(metadata.audioUrl); //THAY B·∫∞NG MERGE AUDIO C·ª¶A B·∫†N
        //wavesurfer.audioUrl = '/img/assets/audio1.mp3'; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh
        wavesurfer.audioUrl = metadata.audioUrl; // UNCOMMENT n·∫øu TH·ª∞C S·ª∞ C√ì FILE √ÇM THANH TRONG JSON
        console.log("Audio URL:", wavesurfer.audioUrl);
        wavesurfer.setVolume(1.0); // 100% volume


        const renderBtn = document.getElementById('renderBtn');
        const videoPreview = document.getElementById('videoPreview');

        renderBtn.addEventListener('click', async () => {
          renderBtn.disabled = true;
          renderBtn.textContent = 'Rendering‚Ä¶';
          try {
            const resp = await fetch('/Video/api/render', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                timeline: imageManager.getAllImages(),
                audioUrl: wavesurfer.audioUrl,
                audioDuration: wavesurfer.getDuration(),
                volume: parseInt(volumeRange.value) / 100
              })
            });
            if (!resp.ok) throw new Error(`Server error ${resp.status}`);
            const blob = await resp.blob();
            const url = URL.createObjectURL(blob);
            videoPreview.src = url;
            videoPreview.style.display = 'block';
            await videoPreview.play();
          } catch (err) {
            console.error(err);
            alert('Kh√¥ng render ƒë∆∞·ª£c video: ' + err.message);
          } finally {
            renderBtn.disabled = false;
            renderBtn.textContent = 'Preview';
          }
        });


        publishBtn.addEventListener('click', () => {
          // Hi·ªán modal
          publishModal.classList.remove('hidden');
          // G√°n gi√° tr·ªã topic s·∫µn
          document.getElementById('topicDisplay').textContent = metadata.topic || 'Kh√¥ng c√≥ ch·ªß ƒë·ªÅ';
        });

        cancelPublish.addEventListener('click', () => {
          publishModal.classList.add('hidden');
        });

        confirmPublish.addEventListener('click', async () => {
          publishModal.classList.add('hidden');
          publishBtn.disabled = true;
          publishBtn.textContent = 'Exporting...';

          const title = document.getElementById('videoTitle').value.trim();
          const description = document.getElementById('videoDescription').value.trim();

          try {
            const resp = await fetch('/Video/api/export', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                timeline: imageManager.getAllImages(), // b·∫°n c·∫ßn ƒë·∫£m b·∫£o g·ªìm start, duration, src
                audioUrl: wavesurfer.audioUrl,
                audioDuration: wavesurfer.getDuration(),
                volume: parseInt(volumeRange.value) / 100,
                resolution: resolutionSelect.value,
                title,
                description,
                content: fullContent,
                topic: metadata.topic,
              })
            });

            const result = await resp.json();
            if (!result.success) throw new Error('Export failed');

            alert('‚úÖ Video ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n th√†nh c√¥ng!\nƒê∆∞·ªùng d·∫´n: ' + result.url);
            window.location.href = result.redirect; // ho·∫∑c m·ªü link trong tab m·ªõi
            // ho·∫∑c: hi·ªÉn th·ªã link t·∫£i, l∆∞u v√†o DB, v.v.



          } catch (err) {
            console.error(err);
            alert('‚ùå Kh√¥ng th·ªÉ xu·∫•t b·∫£n: ' + err.message);
          } finally {
            publishBtn.disabled = false;
            publishBtn.textContent = 'Publish';
          }
        });
    </script>

    <script type="module">
        //SCRIPT JS CHO BEHAVIOUR TIMELINE ·∫¢NH
        const metadata = window.metadata;
        console.log("üì¶ Metadata:", metadata);
        
        import { ImageTimelineManager } from '/js/imageTimelineManager.js';
        const timelineElement = document.getElementById('imageTimeline');
        const selectedPreview = document.getElementById('selectedPreview');
        const moveBtn = document.getElementById('moveToTimeline');
        const imageForm = document.getElementById('imageForm');

        const imageManager = new ImageTimelineManager(
        document.getElementById('imageTimeline'),
        () => waveform.scrollWidth,
        () => wavesurfer.getDuration()
        );
        window.imageManager = imageManager;  // export ra global
        

        metadata.timeline.forEach((item) => {
          const filename = item.src;// L·∫•y t√™n file  t·ª´ metadata
          const isVideo = filename.endsWith('.mp4') || filename.endsWith('.mov'); // Ki·ªÉm tra xem c√≥ ph·∫£i video kh√¥ng
          const wrapper = document.createElement('div');
          wrapper.className = 'relative';

          const thumb = document.createElement(isVideo ? 'video' : 'img');
          const realPath = `/src/${filename}`; //ƒêu·ªùng d·∫´n ƒë·∫ßy ƒë·ªß, thay ƒë·ªïi n·∫øu c·∫ßn
          thumb.src = realPath;

          if (isVideo) {
            thumb.muted = true;
            thumb.loop = true;
            thumb.autoplay = true;
            thumb.className = 'h-24 w-full object-cover border rounded-lg shadow cursor-pointer border-yellow-500';
            thumb.onloadeddata = () => thumb.pause();
          } else {
            thumb.className = 'h-24 w-full object-cover border rounded-lg shadow cursor-pointer';
          }

          thumb.onclick = () => {
            selectedPreview.setAttribute('data-is-video', isVideo);
            selectedPreview.setAttribute('data-src', realPath);

            if (isVideo) {
              const tempVideo = document.createElement('video');
              tempVideo.src = realPath;
              tempVideo.crossOrigin = 'anonymous';
              tempVideo.preload = 'metadata';
              tempVideo.muted = true;

              tempVideo.addEventListener('loadeddata', () => {
                const canvas = document.createElement('canvas');
                canvas.width = tempVideo.videoWidth;
                canvas.height = tempVideo.videoHeight;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(tempVideo, 0, 0, canvas.width, canvas.height);

                const thumbnailDataURL = canvas.toDataURL('image/jpeg');
                selectedPreview.src = thumbnailDataURL;
              });

              tempVideo.play().then(() => tempVideo.pause());
            } else {
              selectedPreview.src = realPath;
            }
          };

          wrapper.appendChild(thumb);

          if (isVideo) {
            const icon = document.createElement('div');
            icon.className = 'absolute top-1 right-1 bg-yellow-400 text-white text-xs px-1 py-0.5 rounded shadow';
            icon.textContent = 'üé•';
            wrapper.appendChild(icon);
          }

          imageForm.appendChild(wrapper);
        });



        

        moveBtn.onclick = () => {
          const realSrc = selectedPreview.getAttribute('data-src');
          const isVideo = selectedPreview.getAttribute('data-is-video') === 'true';

          if (realSrc) {
            const start = imageManager.getNextAvailableStart();

            if (isVideo) {
              // L·∫•y duration video r·ªìi th√™m
              const videoEl = document.createElement('video');
              videoEl.src = realSrc;
              videoEl.preload = 'metadata';
              videoEl.addEventListener('loadedmetadata', () => {
                const duration = Math.floor(videoEl.duration);
                imageManager.addImage(realSrc, start, duration, true);
              });
            } else {
              imageManager.addImage(realSrc, start, 5, false);
            }
          }
        };
        // G·ªçi t·ª´ console ƒë·ªÉ debug
        window.getImageData = () => {
            const data = imageManager.getAllImages();
            console.log("Current timeline image data:", data);
            return data;
        };
        window.addEventListener('keydown', (e) => {
        if ((e.key === 'Delete' || e.key === 'Backspace') && imageManager.selectedWrapper) {
            const wrapper = imageManager.selectedWrapper;

            // X√≥a kh·ªèi DOM
            wrapper.remove();

            // X√≥a kh·ªèi danh s√°ch qu·∫£n l√Ω
            imageManager.images = imageManager.images.filter(img => img.wrapper !== wrapper);
            imageManager.selectedWrapper = null;
        }
        });
        window.addEventListener('keydown', (e) => {
        if ((e.key === 'Delete' || e.key === 'Backspace') && imageManager.selectedWrapper) {
            const wrapper = imageManager.selectedWrapper;

            // X√≥a kh·ªèi DOM
            wrapper.remove();

            // X√≥a kh·ªèi danh s√°ch qu·∫£n l√Ω
            imageManager.images = imageManager.images.filter(img => img.wrapper !== wrapper);
            imageManager.selectedWrapper = null;
        }
        });
        function repositionImage(index) {
            const wrapper = imageManager.selectedWrapper;
            if (!wrapper) return;
            const image = imageManager.images.find(img => img.wrapper === wrapper);
            if (!image) return;

            imageManager.images = imageManager.images.filter(img => img !== image);
            imageManager.images.splice(index, 0, image);

            // T√≠nh l·∫°i v·ªã tr√≠ b·∫Øt ƒë·∫ßu d·ª±a v√†o th·ª© t·ª±
            const pps = imageManager.getPixelsPerSecond();
            let currentStart = 0;
            imageManager.images.forEach(img => {
            img.start = currentStart;
            img.wrapper.style.left = `${currentStart * pps}px`;
            currentStart += img.duration;
            });
        }

        document.getElementById('moveFirstBtn').onclick = () => repositionImage(0);
        document.getElementById('moveLastBtn').onclick = () => repositionImage(imageManager.images.length);
        document.getElementById('movePrevBtn').onclick = () => {
            const i = imageManager.images.findIndex(img => img.wrapper === imageManager.selectedWrapper);
            if (i > 0) repositionImage(i - 1);
        };
        document.getElementById('moveNextBtn').onclick = () => {
            const i = imageManager.images.findIndex(img => img.wrapper === imageManager.selectedWrapper);
            if (i >= 0 && i < imageManager.images.length - 1) repositionImage(i + 1);
        };
    </script>
</body>
</html>