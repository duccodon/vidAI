<div
  class="fixed top-[3.8rem] sm:top-[5.4rem] left-[100px] h-[calc(100vh-5*1vh-3.8rem)] sm:h-[calc(100vh-5*1vh-7rem)] md:h-[calc(100vh-5*1vh-2rem)] w-[100%] md:w-[93%] bg-white rounded-[1rem] border border-[#ccc] overflow-y-auto overflow-x-hidden z-3">
  <div id="firstPage" class="mx-4 my-auto items-center gap-[1rem] py-[1rem] md:flex hidden">
    <img src="data:image/jpeg;base64,{{currentUser.profile_picture}}"
      class="min-w-[2.5rem] min-h-[2.5rem] max-w-[2.5rem] max-h-[2.5rem] rounded-[50%] overflow-hidden" />
    <div class="flex flex-row gap-4 items-start md:items-center w-full">
      <textarea id="insertTopic"
        class="flex-grow w-full md:w-auto pl-4 text-[13px] bg-[#FAFAFA] rounded-[2rem] px-[.5rem] py-[.5rem]"
        placeholder="What's on your mind?" rows="1"
        oninput="this.style.height = ''; this.style.height = this.scrollHeight + 'px';"></textarea>
      <div class="flex flex-wrap gap-4 items-center text-[13px]">
        <label class="flex items-center gap-1">
          <input type="radio" name="duration" value="1 min" class="accent-black" checked />
          <span>Short (1 min)</span>
        </label>
        <label class="flex items-center gap-1">
          <input type="radio" name="duration" value="3 min" class="accent-black" />
          <span>Medium (3 min)</span>
        </label>
        <label class="flex items-center gap-1">
          <input type="radio" name="duration" value="5 min+" class="accent-black" />
          <span>Long (5 min+)</span>
        </label>
      </div>
    </div>
    <div id="postButton"
      class="plus-button inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem]">
      Next
    </div>
  </div>


  <!-- Section to choose bot and style -->
  <div
    class="fixed top-[3.8rem] sm:top-[5.4rem] left-[100px] h-[calc(100vh-5*1vh-3.8rem)] sm:h-[calc(100vh-5*1vh-7rem)] md:h-[calc(100vh-5*1vh-2rem)] w-[100%] md:w-[93%] bg-white rounded-[1rem] border border-[#ccc] overflow-y-auto overflow-x-hidden z-3"
    id="secondPage" style="display: none;">
    <div class="flex flex-row justify-between mx-4 my-auto gap-[3rem] py-[1rem]">
      <div class="flex items-center">
        <div id="returnTopicBtn"
          class="inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem] mt-4">
          Back
        </div>
      </div>

      <div>
        <div class="text-[20px] font-medium">Select Chatbot</div>
        <div class="flex flex-col gap-2">
          <label>
            <input type="radio" name="chatbot" value="Gemini" class="accent-black" checked />
            Gemini
          </label>
          <label>
            <input type="radio" name="chatbot" value="OpenAI" class="accent-black" />
            OpenAI
          </label>
          <label>
            <input type="radio" name="chatbot" value="Groq" class="accent-black" />
            Groq
          </label>
          <label>
            <input type="radio" name="chatbot" value="DeepSeek" class="accent-black" />
            DeepSeek
          </label>
        </div>
      </div>

      <div>
        <div class="text-[20px] font-medium">Select Writing Style</div>
        <div class="flex flex-col gap-2">
          <label>
            <input type="radio" name="writingStyle" value="child" class="accent-black" />
            Child
          </label>
          <label>
            <input type="radio" name="writingStyle" value="adult" class="accent-black" />
            Adult
          </label>
          <label>
            <input type="radio" name="writingStyle" value="professional" class="accent-black" />
            Professional
          </label>
          <label class="flex items-center gap-2">
            <input type="radio" name="writingStyle" value="custom" class="accent-black" id="customStyleRadio" />
            Other:
            <input type="text" id="customStyleInput" class="border px-2 py-1 rounded text-sm"
              placeholder="Enter custom style" />
          </label>
        </div>
      </div>


      <div class="flex items-center">
        <div id="nextButton"
          class="plus-button inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem] mt-4">
          Next
        </div>
      </div>
    </div>
    <div class="flex flex-row justify-between min-h-[150px] h-[600px]">
      <div class="black flex justify-center w-full mt-4">
        <textarea id="scriptDisplay"
          class="scrollbar px-6 py-4 text-base text-center border border-black rounded-md min-h-[150px] w-[95%] max-w-[800px]"
          style="resize: vertical; white-space: pre-wrap;" placeholder="Your script will be displayed here..."
          readonly></textarea>
      </div>

      <div class="flex justify-center items-center mr-4">
        <button id="finishScriptBtn"
          class="plus-button inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem]">
          Finish Script
        </button>
      </div>
    </div>
  </div>


  <!-- Section to gen audio -->
  <div id="thirdPage" style="display: none;"
    class="fixed top-[3.8rem] sm:top-[5.4rem] left-[100px] h-[calc(100vh-5*1vh-3.8rem)] sm:h-[calc(100vh-5*1vh-7rem)] md:h-[calc(100vh-5*1vh-2rem)] w-[100%] md:w-[93%] bg-white rounded-[1rem] border border-[#ccc] overflow-y-auto overflow-x-hidden z-3">
    <div class="flex flex-row justify-between mx-4 my-auto gap-[3rem] py-[1rem]">
      <div class="flex items-center">
        <div id="returnScriptBtn"
          class="inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem] mt-4">
          Back
        </div>
      </div>

      <!-- Select engine TTS -->
      <div>
        <div class="text-[20px] font-medium">Select text-to-speech engine</div>
        <div class="flex flex-col gap-2 mt-2" id="ttsEngineGroup">
          <label>
            <input type="radio" name="ttsEngine" value="elevenlabs" class="accent-black" checked />
            ElevenLabs
          </label>
          <label>
            <input type="radio" name="ttsEngine" value="amazonpolly" class="accent-black" />
            Amazon Polly
          </label>
          <label>
            <input type="radio" name="ttsEngine" value="gtts" class="accent-black" />
            Google TTS (gTTS)
          </label>
        </div>
      </div>

      <!-- Select model/voice -->
      <div>
        <div class="text-[20px] font-medium">Select model / voice</div>
        <div class="flex flex-col gap-2 mt-2" id="voiceModelGroup">
          <!-- update with JavaScript -->
        </div>
      </div>

      <div class="flex items-center">
        <div id="audioButton"
          class="plus-button inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem] mt-4">
          Next
        </div>
      </div>
    </div>

    <!-- result audio -->
    <div id="audioResultTable" class="mx-4 mb-6">
      <div class="text-center mt-10 text-lg font-semibold">Your audio will be displayed here after generating successfully</div>

      <div class="flex justify-center items-center mr-4">
        <button id="finishAudioBtn"
          class="plus-button inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem]">
          Finish audio
        </button>
      </div>
    </div>

  </div>


  <!-- Section to gen media -->
  <div id="fourthPage" style="display: block;"
    class="fixed top-[3.8rem] sm:top-[5.4rem] left-[100px] h-[calc(100vh-5*1vh-3.8rem)] sm:h-[calc(100vh-5*1vh-7rem)] md:h-[calc(100vh-5*1vh-2rem)] w-[100%] md:w-[93%] bg-white rounded-[1rem] border border-[#ccc] overflow-y-auto overflow-x-hidden z-3">

    <div class="flex flex-row justify-between mx-4 my-auto gap-[3rem] py-[1rem]">
      <!-- Back button -->
      <div class="flex items-center">
        <div id="returnAudioBtn"
          class="inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem] mt-4">
          Back
        </div>
      </div>

      <div class="text-center mt-10 text-lg font-semibold">
        This is final step to generate a video 
      </div>

      <!-- Next button -->
      <div class="flex items-center">
        <div id="mediaBtn"
          class="inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem] mt-4">
          Next
        </div>
      </div>
    </div>

    <!-- Media Table -->
    <div class="mt-10">
      <table class="min-w-full table-auto text-sm border-collapse">
        <thead>
          <tr class="bg-gray-100">
            <th class="px-4 py-2 text-left">ID</th>
            <th class="px-4 py-2 text-left">Text</th>
            <th class="px-4 py-2 text-left">Prompt</th>
            <th class="px-4 py-2 text-left">Action</th>
          </tr>
        </thead>
        <tbody id="mediaTableBody">
          <tr>
            <td class="px-4 py-2">1</td>
            <td class="px-4 py-2">Generate video from text content</td>
            <td class="px-4 py-2">
              <input type="text" class="w-full border border-gray-300 p-2 rounded" placeholder="Enter AI prompt" />
            </td>
            <td class="px-4 py-2 text-center">
              <button class="convert-to-video px-4 py-2 bg-blue-500 text-white rounded">Convert to Video</button>
              <button class="add-row px-4 py-2 bg-green-500 text-white rounded">+</button>
            </td>
          </tr>
        </tbody>
      </table>

      <!-- Finish Media Button -->
      <div class="text-center mt-6">
        <button class="px-8 py-3 bg-blue-600 text-white rounded-full text-lg">Finish Media</button>
      </div>
    </div>
    
  </div>


  <div class="mx-4 my-auto items-center gap-[1rem] py-[1rem] text-[25px]">Hot topics</div>
  <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 xl:grid-cols-5 gap-6 p-4">
    <div class="flex flex-col">
      <div class="w-full aspect-[4/3] bg-gray-200 rounded-lg overflow-hidden shadow" onclick="chooseTopic('Geology')">
        <img src="/img/assets/vidAILogo.png" alt="Preview" class="w-full h-full object-cover" />
      </div>
      <div class="flex justify-center mt-2 text-[15px] font-medium text-black truncate">Geology</div>
    </div>

    <div class="flex flex-col">
      <div class="w-full aspect-[4/3] bg-gray-200 rounded-lg overflow-hidden shadow" onclick="chooseTopic('Physics')">
        <img src="/img/assets/vidAILogo.png" alt="Preview" class="w-full h-full object-cover" />
      </div>
      <div class="flex justify-center mt-2 text-[15px] font-medium text-black truncate">Physics</div>
    </div>

    <div class="flex flex-col">
      <div class="w-full aspect-[4/3] bg-gray-200 rounded-lg overflow-hidden shadow" onclick="chooseTopic('Chemistry')">
        <img src="/img/assets/vidAILogo.png" alt="Preview" class="w-full h-full object-cover" />
      </div>
      <div class="flex justify-center mt-2 text-[15px] font-medium text-black truncate">Chemistry</div>
    </div>

    <div class="flex flex-col">
      <div class="w-full aspect-[4/3] bg-gray-200 rounded-lg overflow-hidden shadow" onclick="chooseTopic('Biology')">
        <img src="/img/assets/vidAILogo.png" alt="Preview" class="w-full h-full object-cover" />
      </div>
      <div class="flex justify-center mt-2 text-[15px] font-medium text-black truncate">Biology</div>
    </div>

    <div class="flex flex-col">
      <div class="w-full aspect-[4/3] bg-gray-200 rounded-lg overflow-hidden shadow" onclick="chooseTopic('Animal')">
        <img src="/img/assets/vidAILogo.png" alt="Preview" class="w-full h-full object-cover" />
      </div>
      <div class="flex justify-center mt-2 text-[15px] font-medium text-black truncate">Animal</div>
    </div>

    <div class="flex flex-col">
      <div class="w-full aspect-[4/3] bg-gray-200 rounded-lg overflow-hidden shadow" onclick="chooseTopic('War')">
        <img src="/img/assets/vidAILogo.png" alt="Preview" class="w-full h-full object-cover" />
      </div>
      <div class="flex justify-center mt-2 text-[15px] font-medium text-black truncate">War</div>
    </div>
  </div>


</div>

<script>
  const customRadio = document.getElementById("customStyleRadio");
  const customInput = document.getElementById("customStyleInput");

  // Disable input by default
  customInput.disabled = true;

  document.querySelectorAll('input[name="writingStyle"]').forEach(radio => {
    radio.addEventListener("change", () => {
      customInput.disabled = customRadio.checked ? false : true;
    });
  });

  document.getElementById("returnTopicBtn").addEventListener("click", function () {
    document.getElementById("secondPage").style.display = "none";
  });

  document.getElementById("returnScriptBtn").addEventListener("click", function () {
    document.getElementById("thirdPage").style.display = "none";
  });

  document.getElementById("returnAudioBtn").addEventListener("click", function () {
    document.getElementById("fourthPage").style.display = "none"; 
  });


  //handle choose model/voice
  const ttsVoiceModels = {
    elevenlabs: [
      { name: "Hale - EN/Male", value: "dXtC3XhB9GtPusIpNtQx" },
      { name: "Nichalia Schwartz - EN/Female", value: "XfNU2rGpBa01ckF309OY" },
      { name: "DangTungDuy - VI/Male", value: "3VnrjnYrskPMDsapTr8X" },
      { name: "Huyen - VI/Female", value: "foH7s9fX31wFFH2yqrFa" },
    ],
    amazonpolly: [
      { name: "Joanna - EN/Female", value: "Joanna" },
      { name: "Matthew - EN/Male", value: "Matthew" },
      { name: "Jihye - KOR/Female", value: "Jihye" },
      { name: "Daniel - GER/Male", value: "Daniel" },
    ],
    gtts: [
      { name: "en - English", value: "en" },
      { name: "en - English UK", value: "en-uk" },
      { name: "vi - Vietnamese", value: "vi" },
      { name: "es - Spanish", value: "es" },
    ],
  };

  const ttsRadios = document.querySelectorAll('input[name="ttsEngine"]');
  const voiceModelGroup = document.getElementById("voiceModelGroup");

  function renderVoiceModels(engine) {
    voiceModelGroup.innerHTML = "";

    const voices = ttsVoiceModels[engine] || [];
    voices.forEach((voice, index) => {
      const label = document.createElement("label");
      label.className = "flex gap-2 items-center min-w-[200px]";

      const input = document.createElement("input");
      input.type = "radio";
      input.name = "voiceModel";
      input.value = voice.value;
      input.className = "accent-black";

      if (index === 0) input.checked = true;

      label.appendChild(input);
      label.appendChild(document.createTextNode(voice.name));
      voiceModelGroup.appendChild(label);
    });

    if (voices.length === 0) {
      voiceModelGroup.innerHTML = "<div class='text-sm text-gray-500'>Không có giọng đọc tương ứng.</div>";
    }
  }

  ttsRadios.forEach((radio) => {
    radio.addEventListener("change", (e) => {
      renderVoiceModels(e.target.value);
    });
  });

  const defaultEngine = document.querySelector('input[name="ttsEngine"]:checked').value;
  renderVoiceModels(defaultEngine);


  // Handle button click
  document.addEventListener("DOMContentLoaded", function () {
    document.getElementById("postButton").addEventListener("click", async function () {
      const topic = document.getElementById("insertTopic").value.trim();
      const duration = document.querySelector('input[name="duration"]:checked').value;

      if (!topic) {
        alert("Please enter a topic.");
        return;
      }
      if (!duration) {
        alert("Please select a duration.");
        return;
      }

      document.getElementById("secondPage").style.display = "block";

      // Pass the topic and duration to the next page as needed
      window.currentTopic = topic;
      window.currentDuration = duration;
    });

    // Handle script "Next" button click
    document.getElementById("nextButton").addEventListener("click", async function () {
      const selectedChatbot = document.querySelector('input[name="chatbot"]:checked')?.value;
      let selectedWritingStyles = document.querySelector('input[name="writingStyle"]:checked')?.value;
      const customInput = document.getElementById("customStyleInput");

      if (!selectedChatbot) {
        alert("Please select a chatbot.");
        return;
      }
      if (!selectedWritingStyles) {
        alert("Please select a writing style.");
        return;
      }
      console.log("Selected Chatbot:", selectedChatbot);
      console.log("Selected Writing Styles:", selectedWritingStyles);

      if (selectedWritingStyles === "custom") {
        const customStyle = customInput.value.trim();
        if (!customStyle) {
          alert("Please enter a custom writing style.");
          return;
        }
        selectedWritingStyles = customStyle;
      }

      const scriptDisplay = document.getElementById("scriptDisplay");
      scriptDisplay.setAttribute("readonly", "true");
      try {
        scriptDisplay.textContent = "In process...";

        const res = await fetch("/homepage/api/generate-script", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            topic: window.currentTopic,
            duration: window.currentDuration,
            chatbot: selectedChatbot,
            writingStyles: selectedWritingStyles,
          }),
        });

        const data = await res.json();

        if (data.success) {
          scriptDisplay.textContent = data.script;
          scriptDisplay.removeAttribute("readonly");
          scriptDisplay.scrollIntoView({ behavior: "smooth" }); // Optional: scroll to it
          window.currentScript = data.script; // later use in audio generation
        } else {
          scriptDisplay.textContent = "Error: " + data.message;
        }
      } catch (err) {
        console.error(err);
      }
    });


    //Handle finish script button click
    document.getElementById("finishScriptBtn").addEventListener("click", async function () {
      const script = document.getElementById("scriptDisplay").value.trim();
      if (!script) {
        alert("Please generate a script first.");
        return;
      }

      document.getElementById("thirdPage").style.display = "block";
      // Redirect to the next page or perform any action you want
      //window.location.href = "/homepage/gen-audio";
    });

    //Handle next audio btn click
    document.getElementById("audioButton").addEventListener("click", async function () {
      const selectedTtsEngine = document.querySelector('input[name="ttsEngine"]:checked')?.value;
      const selectedVoiceModel = document.querySelector('input[name="voiceModel"]:checked')?.value;
      const script = window.currentScript?.trim(); 

      if (!selectedTtsEngine) {
        alert("Please select a TTS engine.");
        return;
      }
      if (!selectedVoiceModel) {
        alert("Please select a voice model.");
        return;
      }
      if (!script) {
        alert("Please generate a script first.");
        return;
      }

      try {
        const res = await fetch("/homepage/api/generate-audio", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            engine: selectedTtsEngine,
            voice: selectedVoiceModel,
            script: script,
          }),
        });

        const data = await res.json();

        if (data.success) {
          data.audios.forEach(segment => {
            console.log("Audio result:", segment.segmentTitle);
            segment.ideas.forEach(idea => {
              console.log("Text:", idea.text);
              console.log("Audio path:", idea.audioPath);
              console.log("Visual: ", idea.visual);
            });
          });

          updateAudioUI(data.audios);
          setupAudioButtons();
        } else {
          alert(data.message);
        }
      } catch (err) {
        console.error("Audio generation failed:", err);
        alert("Failed to generate audio. Please try again.");
      }
    });
    
    // Handle finish audio button click
    document.getElementById("finishAudioBtn").addEventListener("click", async function () {
      /*const finalJson = await generateFinalJson();
      console.log("Final JSON:", JSON.stringify(finalJson, null, 2));
      const allHaveAudio = finalJson.every(item => item.audioUrl && item.audioUrl.trim() !== "");

      if (!allHaveAudio) {
        alert("Please generate audio files fully before proceeding.");
        return;
      }

      document.getElementById("fourthPage").style.display = "block";*/
      alert("Please generate audio files fully before proceeding."); 
    });  
  });


  function updateAudioUI(audioSegments) {
    const tableWrapper = document.getElementById("audioResultTable");
    tableWrapper.replaceChildren();

    let index = 1;
    let tableHTML = `
      <table class="w-full border border-gray-300 text-left text-sm">
        <thead>
          <tr class="bg-gray-100 font-semibold">
            <th class="border px-4 py-2 w-[5%]">#</th>
            <th class="border px-4 py-2 w-[55%]">Text</th>
            <th class="border px-4 py-2 w-[40%]">Actions</th>
          </tr>
        </thead>
        <tbody>
    `;

    audioSegments.forEach(segment => {
      segment.ideas.forEach(idea => {
        tableHTML += `
          <tr data-visual="${encodeURIComponent(idea.visual || "")}">
            <td class="border px-4 py-2">${index++}</td>
            <td class="border px-4 py-2">${idea.text}</td>
            <td class="border px-4 py-2">
              <div class="flex gap-4 items-center">
                <button class="play-btn px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600" data-audio="${idea.audioPath}">Play</button>
                <button class="record-btn px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Record</button>
              </div>
            </td>
          </tr>
        `;
      });
    });

    tableHTML += `</tbody></table>
      <div class="flex justify-center items-center mr-4">
        <button id="finishAudioBtn"
          class="plus-button inline-block px-[2rem] py-[.6rem] font-medium cursor-pointer transition ease-in-out duration-300 text-sm hover:opacity-80 bg-white text-black border border-black border-solid rounded-[.7rem]">
          Finish audio
        </button>
      </div>`;
    tableWrapper.innerHTML = tableHTML;
  }

  function setupAudioButtons() {
    // Play audio btn
    let currentAudio = null;
    let currentButton = null;

    document.querySelectorAll(".play-btn").forEach(btn => {
      btn.addEventListener("click", () => {
        // If another audio is already playing, pause that audio
        if (currentAudio && currentAudio !== btn.audioInstance) {
          currentAudio.pause();
          currentAudio.currentTime = 0;
          if (currentButton) {
            currentButton.textContent = "Play";
          }
        }

        // if there is no audio instance, create
        if (!btn.audioInstance) {
          btn.audioInstance = new Audio(btn.dataset.audio);
        }

        // If this audio is already playing, pause and reset
        if (!btn.audioInstance.paused) {
          btn.audioInstance.pause();
          btn.audioInstance.currentTime = 0;
          btn.textContent = "Play";
          currentAudio = null;
          currentButton = null;
        } else { 
          // play the audio
          btn.audioInstance.play();
          btn.textContent = "Stop";
          currentAudio = btn.audioInstance;
          currentButton = btn;

          // Reset the button text when the audio ends
          btn.audioInstance.onended = () => {
            btn.textContent = "Play";
            currentAudio = null;
            currentButton = null;
          };
        }
      });
    });


    // Record btn
    document.querySelectorAll(".record-btn").forEach((btn, index) => {
      let mediaRecorder = null;
      let audioChunks = [];
      let isRecording = false;
      let timerInterval = null;
      let seconds = 0;
      let timerEl = null;

      btn.addEventListener("click", async () => {
        if (!isRecording) {
          try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = e => {
              if (e.data.size > 0) {
                audioChunks.push(e.data);
              }
            };

            mediaRecorder.onstop = async () => {
              clearInterval(timerInterval);
              timerEl.remove();

              const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
              const audioUrl = URL.createObjectURL(audioBlob);
              const audio = new Audio(audioUrl);
              audio.controls = true;

              const audioContainer = document.createElement('div');
              audioContainer.appendChild(audio);
              btn.parentElement.appendChild(audioContainer);

              // Gửi file về server
              const formData = new FormData();
              formData.append('audio', audioBlob, `recording_${index}.webm`);

              const response = await fetch('/Homepage/upload-recording', {
                method: 'POST',
                body: formData
              });
              const result = await response.json();

              if (result.success) {
                console.log("Audio uploaded to server!");
                btn.dataset.recordedUrl = result.path.replace('/src/', ''); // chỉ tên file 
                btn.dataset.duration = seconds.toString(); // thời lượng
              } else {
                console.error("Upload failed.");
              }
            };

            // Timer hiển thị
            timerEl = document.createElement('span');
            timerEl.className = "ml-2 text-xs text-white bg-red-500 px-2 py-1 rounded";
            timerEl.textContent = "00:00";
            btn.parentElement.appendChild(timerEl);

            seconds = 0;
            timerInterval = setInterval(() => {
              seconds++;
              const m = String(Math.floor(seconds / 60)).padStart(2, '0');
              const s = String(seconds % 60).padStart(2, '0');
              timerEl.textContent = `${m}:${s}`;
            }, 1000);

            mediaRecorder.start();
            isRecording = true;
            btn.textContent = "Stop Recording";
          } catch (err) {
            console.error("Mic permission denied or error:", err);
            alert("Failed to access microphone.");
          }
        } else {
          mediaRecorder.stop();
          isRecording = false;
          btn.textContent = "Record";
        }
      });
    });

    // Handle finish audio button click
    document.getElementById("finishAudioBtn").addEventListener("click", async function () {
      const finalJson = await generateFinalJson();
      console.log("Final JSON:", JSON.stringify(finalJson, null, 2));
      const allHaveAudio = finalJson.every(item => item.audioUrl && item.audioUrl.trim() !== "");

      if (!allHaveAudio) {
        alert("Please generate audio files fully before proceeding.");
        return;
      }

      document.getElementById("fourthPage").style.display = "block";
    });  
  }
  // Save every data except image/vid to JSON
    async function generateFinalJson() {
      const rows = document.querySelectorAll("tbody tr");
      const result = [];
      let startTime = 0;

      for (const row of rows) {
        const text = row.querySelector("td:nth-child(2)").innerText.trim();
        const playBtn = row.querySelector(".play-btn");
        const recordBtn = row.querySelector(".record-btn");
        const visual = decodeURIComponent(row.dataset.visual || "");

        const hasRecorded = recordBtn.dataset.recordedUrl;
        const audioUrl = hasRecorded ? `/src/${recordBtn.dataset.recordedUrl}` : playBtn.dataset.audio;

        let duration = hasRecorded ? parseFloat(recordBtn.dataset.duration) : null;

        if (!hasRecorded) {
          // Lấy duration từ audio gốc
          duration = await getAudioDuration(audioUrl);
        }

        result.push({
          start: startTime,
          duration: duration,
          audioUrl: audioUrl,
          src: "",
          content: text,
          visual: visual,
        });

        startTime += duration;
      }

      console.log("Final JSON:", JSON.stringify(result, null, 2));
      return result;
    }
  // Hàm phụ để lấy thời lượng file audio
  function getAudioDuration(url) {
    return new Promise((resolve) => {
      const audio = new Audio(url);
      audio.addEventListener('loadedmetadata', () => {
        resolve(audio.duration);
      });
      audio.addEventListener('error', () => {
        console.error("Error loading audio metadata:", url);
        resolve(6); // fallback nếu lỗi
      });
    });
  }


  // fourth page
  const tableBody = document.getElementById('mediaTableBody');
  tableBody.addEventListener('click', function (event) {
    const target = event.target;
    const jsonData = window.jsonData || []; 

    // Khi click vào nút "+"
    if (target.classList.contains('add-row')) {
      console.log("Add row clicked");
      const row = target.closest('tr');
      const content = row.children[1].textContent;
      const duration = parseFloat(jsonData.find(item => item.content === content)?.duration || 0);

      // Đếm số lần content này đã được dùng trong table
      const currentCount = Array.from(tableBody.querySelectorAll('tr')).filter(tr =>
        tr.children[1] && tr.children[1].textContent === content
      ).length;

      // Kiểm tra còn đủ duration để thêm dòng mới không
      if ((currentCount + 1) * 5 > duration) {
        alert('Không thể thêm nữa! Thời lượng không đủ.');
        return; // Ngăn thêm dòng
      }

      const newRow = row.cloneNode(true);
      newRow.querySelector('input').value = '';

      const convertBtn = newRow.querySelector('.convert-to-video');
      convertBtn.addEventListener('click', () => {
        alert('Convert to video clicked');
      });

      const oldRemoveBtn = newRow.querySelector('.remove-row');
      if (oldRemoveBtn) oldRemoveBtn.remove();

      const removeButton = document.createElement('button');
      removeButton.textContent = '-';
      removeButton.className = 'remove-row px-4 py-2 bg-red-500 text-white rounded ml-2';

      newRow.querySelector('td:last-child').appendChild(removeButton);
      tableBody.appendChild(newRow);
    }

    // Khi click vào nút "-"
    if (target.classList.contains('remove-row')) {
      const row = target.closest('tr');
      row.remove();
    }
  });

  function finishMedia() {
    const jsonData = [
      {
        "start": 0,
        "duration": 4.284,
        "audioUrl": "/audios/audio_00-00_00-10_0.mp3",
        "src": "",
        "content": "Let’s explore dendritic cells, the unsung heroes of your immune system!",
        "visual": "Animation of a dendritic cell with a spotlight on it."
      },
      {
        "start": 4.284,
        "duration": 15.347667,
        "audioUrl": "/audios/audio_00-10_00-40_0.mp3",
        "src": "",
        "content": "Dendritic cells, or DCs, are antigen-presenting cells. Think of them as immune system messengers.",
        "visual": "Simple animation showing a dendritic cell engulfing an antigen."
      }
    ];
    window.jsonData = jsonData; 

    tableBody.innerHTML = ''; // Clear old rows

    jsonData.forEach((item, index) => {
      const id = index + 1;
      const row = document.createElement('tr');

      // ID
      const idCell = document.createElement('td');
      idCell.className = 'px-4 py-2';
      idCell.textContent = id;

      // Text
      const textCell = document.createElement('td');
      textCell.className = 'px-4 py-2';
      textCell.textContent = item.content;

      // Prompt
      const promptCell = document.createElement('td');
      promptCell.className = 'px-4 py-2';
      const promptInput = document.createElement('input');
      promptInput.type = 'text';
      promptInput.className = 'w-full border border-gray-300 p-2 rounded';
      promptInput.value = item.visual;
      promptCell.appendChild(promptInput);

      // Action
      const actionCell = document.createElement('td');
      actionCell.className = 'px-4 py-2 text-center';

      const convertBtn = document.createElement('button');
      convertBtn.className = 'convert-to-video px-4 py-2 bg-blue-500 text-white rounded';
      convertBtn.textContent = 'Convert to Video';
      actionCell.appendChild(convertBtn);

      const addBtn = document.createElement('button');
      addBtn.className = 'add-row px-4 py-2 bg-green-500 text-white rounded ml-2';
      addBtn.textContent = '+';
      actionCell.appendChild(addBtn);

      row.appendChild(idCell);
      row.appendChild(textCell);
      row.appendChild(promptCell);
      row.appendChild(actionCell);
      tableBody.appendChild(row);
    });
  }
  finishMedia();


  function chooseTopic(topic) {
    console.log("Topic chosen:", topic);
  }
</script>